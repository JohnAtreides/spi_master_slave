#include "mbed.h"
#include <mbed_events.h>

#include "PCD8544.h"
#include "NRFSPIS.h"

DigitalOut led(LED1);
PCD8544 lcd(P0_3, P0_2, P0_4, P0_26, P0_12, P0_27, P0_7);

InterruptIn button(BUTTON1);

void received_data();

NRFSPIS spis(SPIS_MOSI, SPIS_MISO, SPIS_SCK, SPIS_SS, NRF_SPIS_MODE_3, 1);

EventQueue queue;

volatile uint32_t buttonState(0);

int32_t txbuffer[100];
int32_t rxbuffer[100];

void buttonUp()
{
    txbuffer[0] = 0;
}

void buttonDown()
{
    txbuffer[0] = 1;
}

void display(int x, int y, char string[20]);
void showdata();

void ledoff()
{
    led = 0;
    showdata();
}

void received_data()
{
    led = 1;
    queue.call_in(1, ledoff);
}

void showdata()
{
    int32_t data = rxbuffer[0];
    char string[20];

    display(40, 0, "       ");
    //display(40, 0, (char *)data);
    lcd.setXY(40, 0);
    sprintf(string, "%6d", (int)data);
    lcd.drawString(string);
    //txbuffer[0] = buttonState;

    spis.transfer(reinterpret_cast<uint8_t *>(txbuffer), 4, reinterpret_cast<uint8_t *>(rxbuffer), 100, received_data);
}

// ajout compteur de temps
int lotOfSec = 0;
typedef struct temps
{
    unsigned int hour;
    unsigned int minute;
    unsigned int second;
} temps_t;

temps_t cutTime(unsigned int);

temps_t cutTime(unsigned int lotOfSec)
{
    temps_t hoMiSe; //hourMInuteSEcond..
    hoMiSe.hour = lotOfSec / 3600;
    lotOfSec = lotOfSec - (3600 * hoMiSe.hour);
    hoMiSe.minute = lotOfSec / 60;
    hoMiSe.second = hoMiSe.minute % 3600;

    return hoMiSe;
}
// fin compteur temps

void display(int x, int y, char string[20])
{
    lcd.setXY(x, y);
    sprintf(string, "");
    lcd.drawString(string);
}

int main()
{

    button.rise(buttonUp);
    button.fall(buttonDown); //

    char string[20];

    ThisThread::sleep_for(100);

    lcd.activate();
    display(0, 0, "Temp");
    /*
    sprintf(string, "Temp: ");
    lcd.drawString(string);
    */
    rxbuffer[0] = 42;
    showdata();

    display(0, 2, "YOLO");

    //pour compteur timeUp
    lotOfSec++;
    temps_t result;
    result = cutTime(lotOfSec);
    //fin compteur

    queue.dispatch_forever();
}
